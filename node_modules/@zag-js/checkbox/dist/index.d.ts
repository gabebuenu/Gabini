import { RequiredBy, DirectionProperty, CommonProperties, Context, PropTypes, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare type ElementIds = Partial<{
    root: string;
    input: string;
    control: string;
    label: string;
}>;
declare type PublicContext = DirectionProperty & CommonProperties & {
    /**
     * The ids of the elements in the checkbox. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * If `true`, the checkbox will be indeterminate.
     * This only affects the icon shown inside checkbox
     * and does not modify the isChecked property.
     */
    indeterminate?: boolean;
    /**
     * If `true`, the checkbox will be disabled
     */
    disabled?: boolean;
    /**
     * If `true` and `disabled` is passed, the checkbox will
     * remain tabbable but not interactive
     */
    focusable?: boolean;
    /**
     * If `true`, the checkbox will be readonly
     */
    readonly?: boolean;
    /**
     * If `true`, the checkbox is marked as invalid.
     */
    invalid?: boolean;
    /**
     * If `true`, the checkbox input is marked as required,
     */
    required?: boolean;
    /**
     * If `true`, the checkbox will be initially checked.
     */
    defaultChecked?: boolean;
    /**
     * The callback invoked when the checked state of the `Checkbox` changes.
     */
    onChange?: (details: {
        checked: boolean | "indeterminate";
    }) => void;
    /**
     * The name of the input field in a checkbox
     * (Useful for form submission).
     */
    name?: string;
    /**
     * The value to be used in the checkbox input.
     * This is the value that will be returned on form submission.
     */
    value?: string | number;
    /**
     * Defines the string that labels the checkbox element.
     */
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-invalid"?: boolean;
    "aria-describedby"?: string;
};
declare type UserDefinedContext = RequiredBy<PublicContext, "id">;
declare type ComputedContext = Readonly<{
    /**
     * @computed
     * Whether the slider is interactive
     */
    readonly isInteractive: boolean;
}>;
declare type PrivateContext = Context<{}>;
declare type MachineContext = PublicContext & PrivateContext & ComputedContext;
declare type MachineState = {
    value: "unknown" | "checked" | "unchecked";
    tags: "checked" | "unchecked";
};
declare type State = StateMachine.State<MachineContext, MachineState>;
declare type Send = StateMachine.Send<StateMachine.AnyEventObject>;

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): {
    isChecked: boolean;
    isDisabled: boolean | undefined;
    isIndeterminate: boolean | undefined;
    isFocused: boolean;
    isReadOnly: boolean | undefined;
    view: string;
    setChecked(checked: boolean): void;
    setIndeterminate(indeterminate: boolean): void;
    rootProps: T["element"];
    labelProps: T["label"];
    controlProps: T["element"];
    inputProps: T["input"];
};

declare function machine(ctx: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { UserDefinedContext as Context, connect, machine };
