import * as _zag_js_core from '@zag-js/core';
import { StateMachine, Machine, MachineSrc } from '@zag-js/core';
export { ContextFrom, EventFrom, StateFrom, mergeProps } from '@zag-js/core';
import * as _zag_js_types from '@zag-js/types';
import * as vue from 'vue';
import { Ref, ComputedRef } from 'vue';

declare type ReservedProps = {
    key?: string | number | symbol;
    ref?: vue.VNodeRef;
};
declare type Attrs<T> = T & ReservedProps;
declare type PropTypes = JSX.IntrinsicElements & {
    element: Attrs<vue.HTMLAttributes>;
};
declare const normalizeProps: _zag_js_types.NormalizeProps<PropTypes>;

declare function useActor<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(service: Machine<TContext, TState, TEvent>): readonly [vue.ShallowRef<StateMachine.State<TContext, TState, TEvent>>, (evt: StateMachine.Event<TEvent>) => void];

declare type MachineOptions<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject> = Omit<StateMachine.HookOptions<TContext, TState, TEvent>, "context"> & {
    context?: Ref<StateMachine.UserContext<TContext>> | ComputedRef<StateMachine.UserContext<TContext>>;
};
declare function useService<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(machine: MachineSrc<TContext, TState, TEvent>, options?: MachineOptions<TContext, TState, TEvent>): _zag_js_core.Machine<TContext, TState, TEvent>;
declare function useMachine<TContext extends Record<string, any>, TState extends StateMachine.StateSchema, TEvent extends StateMachine.EventObject = StateMachine.AnyEventObject>(machine: MachineSrc<TContext, TState, TEvent>, options?: Omit<StateMachine.HookOptions<TContext, TState, TEvent>, "context"> & {
    context?: Ref<StateMachine.UserContext<TContext>> | ComputedRef<StateMachine.UserContext<TContext>>;
}): readonly [vue.ShallowRef<StateMachine.State<TContext, TState, TEvent>>, (evt: StateMachine.Event<TEvent>) => void, _zag_js_core.Machine<TContext, TState, TEvent>];

declare const useSnapshot: <T extends object>(object: T) => [T] extends [vue.Ref<any>] ? T : vue.Ref<vue.UnwrapRef<T>>;

export { normalizeProps, useActor, useMachine, useService, useSnapshot };
