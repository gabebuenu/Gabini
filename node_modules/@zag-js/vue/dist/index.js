"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  mergeProps: () => import_core.mergeProps,
  normalizeProps: () => normalizeProps,
  useActor: () => useActor,
  useMachine: () => useMachine,
  useService: () => useService,
  useSnapshot: () => useSnapshot
});
module.exports = __toCommonJS(src_exports);
var import_core = require("@zag-js/core");

// src/normalize-props.ts
var import_types = require("@zag-js/types");
function toCase(txt) {
  return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
}
var eventMap = {
  htmlFor: "for",
  className: "class",
  onDoubleClick: "onDblclick",
  onChange: "onInput",
  onFocus: "onFocusin",
  onBlur: "onFocusout"
};
function toVueProp(prop) {
  if (prop in eventMap)
    return eventMap[prop];
  if (prop.startsWith("on")) {
    return `on${toCase(prop.substr(2))}`;
  }
  return prop.toLowerCase();
}
var normalizeProps = (0, import_types.createNormalizer)((props) => {
  const normalized = {};
  for (const key in props) {
    if (key === "children") {
      if (typeof props[key] === "string") {
        normalized["innerHTML"] = props[key];
      } else if (process.env.NODE_ENV !== "production") {
        console.warn("[Vue Normalize Prop] : avoid passing non-primitive value as `children`");
      }
    } else {
      normalized[toVueProp(key)] = props[key];
    }
  }
  return normalized;
});

// src/use-actor.ts
var import_vue = require("vue");
function useActor(service) {
  const state = (0, import_vue.shallowRef)(service.state);
  (0, import_vue.onMounted)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      state.value = nextState;
    });
    (0, import_vue.onBeforeUnmount)(() => {
      unsubscribe == null ? void 0 : unsubscribe();
    });
  });
  return [state, service.send];
}

// src/use-machine.ts
var import_vue2 = require("vue");
function useService(machine, options) {
  const { actions, state: hydratedState, context } = options ?? {};
  const _machine = typeof machine === "function" ? machine() : machine;
  const service = context ? _machine.withContext(context.value) : _machine;
  (0, import_vue2.onMounted)(() => {
    service.start(hydratedState);
    if (service.state.can("SETUP")) {
      service.send("SETUP");
    }
    (0, import_vue2.onBeforeUnmount)(() => {
      service.stop();
    });
  });
  (0, import_vue2.watch)(() => actions, service.setActions, { flush: "post", immediate: true });
  if (context) {
    (0, import_vue2.watch)(context, (ctx) => service.setContext(ctx), { deep: true });
  }
  return service;
}
function useMachine(machine, options) {
  const service = useService(machine, options);
  const state = (0, import_vue2.shallowRef)(service.state);
  (0, import_vue2.onMounted)(() => {
    const unsubscribe = service.subscribe((nextState) => {
      state.value = nextState;
    });
    (0, import_vue2.onBeforeUnmount)(() => {
      unsubscribe == null ? void 0 : unsubscribe();
    });
  });
  return [state, service.send, service];
}

// src/use-snapshot.ts
var import_store = require("@zag-js/store");
var import_vue3 = require("vue");
var useSnapshot = (object) => {
  const state = (0, import_vue3.ref)({});
  const unsubscribe = (0, import_store.subscribe)(object, () => {
    state.value = (0, import_store.snapshot)(object);
  });
  (0, import_vue3.onUnmounted)(() => {
    unsubscribe == null ? void 0 : unsubscribe();
  });
  return state;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeProps,
  normalizeProps,
  useActor,
  useMachine,
  useService,
  useSnapshot
});
