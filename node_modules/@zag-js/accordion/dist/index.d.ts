import { RequiredBy, DirectionProperty, CommonProperties, Context, PropTypes, NormalizeProps } from '@zag-js/types';
import * as _zag_js_core from '@zag-js/core';
import { StateMachine } from '@zag-js/core';

declare type ElementIds = Partial<{
    root: string;
    item(value: string): string;
    content(value: string): string;
    trigger(value: string): string;
}>;
declare type PublicContext = DirectionProperty & CommonProperties & {
    /**
     * The ids of the elements in the accordion. Useful for composition.
     */
    ids?: ElementIds;
    /**
     * Whether multple accordion items can be open at the same time.
     * @default false
     */
    multiple?: boolean;
    /**
     * Whether an accordion item can be collapsed after it has been opened.
     * @default false
     */
    collapsible?: boolean;
    /**
     * The `id` of the accordion item that is currently being opened.
     */
    value: string | string[] | null;
    /**
     * Whether the accordion items are disabled
     */
    disabled?: boolean;
    /**
     * The callback fired when the state of opened/closed accordion items changes.
     */
    onChange?: (details: {
        value: string | string[] | null;
    }) => void;
};
declare type UserDefinedContext = RequiredBy<PublicContext, "id">;
declare type ComputedContext = Readonly<{}>;
declare type PrivateContext = Context<{}>;
declare type MachineContext = PublicContext & PrivateContext & ComputedContext;
declare type MachineState = {
    value: "unknown" | "idle" | "focused";
};
declare type State = StateMachine.State<MachineContext, MachineState>;
declare type Send = StateMachine.Send<StateMachine.AnyEventObject>;
declare type ItemProps = {
    value: string;
    disabled?: boolean;
};

declare function connect<T extends PropTypes>(state: State, send: Send, normalize: NormalizeProps<T>): {
    value: string | string[] | null;
    setValue(value: string | string[]): void;
    rootProps: T["element"];
    getItemState(props: ItemProps): {
        isOpen: boolean;
        isFocused: boolean;
        isDisabled: boolean | undefined;
    };
    getItemProps(props: ItemProps): T["element"];
    getContentProps(props: ItemProps): T["element"];
    getTriggerProps(props: ItemProps): T["button"];
};

declare function machine(ctx: UserDefinedContext): _zag_js_core.Machine<MachineContext, MachineState, _zag_js_core.StateMachine.AnyEventObject>;

export { UserDefinedContext as Context, connect, machine };
