import { EmotionCache } from "@emotion/utils";
import { DefineComponent, Component, VNode, SetupContext } from "vue";
declare const EmotionCacheProvider: (opts: EmotionCache) => void, EmotionCacheInjectionSymbol: Symbol;
export declare const defaultCache: EmotionCache;
export declare let __unusafe_useEmotionCache: (fallback?: EmotionCache | undefined) => EmotionCache;
declare let withEmotionCache: (fn: (cache: EmotionCache) => Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}> | ((props?: unknown, ctx?: SetupContext<import("vue").EmitsOptions> | undefined) => VNode)) => (p: unknown) => Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | DefineComponent<{}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}> | ((props?: unknown, ctx?: SetupContext<import("vue").EmitsOptions> | undefined) => VNode);
export { withEmotionCache, EmotionCacheProvider, EmotionCacheInjectionSymbol };
//# sourceMappingURL=cache.d.ts.map