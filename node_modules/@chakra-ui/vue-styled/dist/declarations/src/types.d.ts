import { Component, ConcreteComponent, EmitsOptions, SetupContext, VNode } from "vue";
import { StyledElementTags } from "./tags";
export declare type StyledOptions = {
    __label?: string;
    target?: string;
};
export declare type Interpolations = Array<any>;
export declare type StyledComponent<Props> = (_: unknown, { attrs, expose, slots }: SetupContext<EmitsOptions>) => VNode & {
    __emotion_real: StyledComponent<Props>;
    __emotion_base: any;
    __emotion_styles: any;
    __emotion_forwardProp: any;
    withComponent: CreateStyled;
};
export declare type StyledTagOrComponent = StyledElementTags | Component | ConcreteComponent | string;
export declare type StyledElementType<Props> = string | StyledComponent<Props & {
    class: string;
}> | Component<Props & {
    class: string;
}>;
export declare type PrivateStyledComponent<Props> = StyledComponent<Props> & {
    __emotion_real: StyledComponent<Props>;
    __emotion_base: any;
    __emotion_styles: any;
    __emotion_forwardProp: any;
    withComponent: CreateStyled;
};
export declare type CreateStyledComponent = <Props>(...args: Interpolations) => StyledComponent<Props>;
export declare type CreateStyled = {
    <Props>(tag: StyledElementType<Props>, options?: StyledOptions): (...args: Interpolations) => StyledComponent<Props>;
    [key: string]: CreateStyledComponent;
    bind: () => CreateStyled;
} & {
    [key in StyledElementTags]: <Props>(...args: any[]) => PrivateStyledComponent<Props>;
};
//# sourceMappingURL=types.d.ts.map