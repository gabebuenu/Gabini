import { Component, ConcreteComponent, DefineComponent, HTMLAttributes, ComponentCustomProps, PropType } from "vue";
import { ResponsiveValue, SystemProps, SystemStyleObject } from "@chakra-ui/styled-system";
import { Dict } from "@chakra-ui/utils";
import { CSSObject } from "@emotion/css";
import { DOMElements } from "./system.utils";
import { As, ChakraProps, ComponentWithProps } from "./system.types";
import { FunctionInterpolation } from "@emotion/serialize";
export interface BaseStyleResolverProps {
    as?: ChakraTagOrComponent;
    __css?: SystemStyleObject;
    sx?: SystemStyleObject;
    css?: CSSObject;
    noOfLines?: ResponsiveValue<number>;
    isTruncated?: boolean;
    apply?: ResponsiveValue<string>;
    componentName?: String;
    label?: string;
    baseStyle?: SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject);
    /**
     * User provided styles from component/chakra API
     */
    styles?: SystemStyleObject;
    /**
     * This attribute/property is reserved for all TSX component definitions.
     * It is referenced by the chakra factiry function to
     * preserve the component's label class
     */
    __label?: string;
    theme?: Dict<any>;
}
export interface StyleResolverProps extends BaseStyleResolverProps, SystemProps {
}
interface StyleResolverOptions extends StyleResolverProps {
    truncateStyle?: CSSObject;
    theme?: any;
}
declare const chakraProps: {
    as: PropType<ChakraTagOrComponent>;
    __css: PropType<SystemStyleObject | undefined>;
    sx: PropType<SystemStyleObject | undefined>;
    css: PropType<CSSObject | undefined>;
    noOfLines: PropType<ResponsiveValue<number> | undefined>;
    baseStyle: PropType<SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject) | undefined>;
    isTruncated: PropType<boolean | undefined>;
    layerStyle: PropType<ResponsiveValue<string & {}> | undefined>;
    textStyle: PropType<ResponsiveValue<string & {}> | undefined>;
    apply: PropType<ResponsiveValue<string> | undefined>;
    label: PropType<string | undefined>;
    modelValue: PropType<string | boolean | object>;
    /**
     * @warning
     * @internal
     * This internal is an internal ChakraFactoryFunction prop that
     * is used to determine how events are handled on Chakra Factory
     * components.
     *
     * For example, if a factory component is considered to be raw (i.e. `__chakraIsRaw: true`),
     * then, we do not pass v-model event listeners onto the component. This means that
     * `v-model` will not work in the template context.
     *
     * You can see how this prop is used in the `c-input` component.
     *
     * THIS PROP IS A NON-DOCUMENTED PROP, AND IS ONLY TO BE USED FOR INTERNAL DEVELOPMENT.
     */
    __chakraIsRaw: PropType<boolean>;
};
export declare type ChakraBaseComponentProps = typeof chakraProps;
export declare type ChakraTagOrComponent = DOMElements | Component | ConcreteComponent | string;
/**
 * Chakra factory serves as an object of chakra enabled HTML elements,
 * and also a function that can be used to enable custom component receive chakra's style props.
 * @param tag Tag or Component
 * @param options resolver options
 *
 * How does it work?
 *
 * 1. Components returned from the chakra factory can be styled after consuming them
 *    @example
 *    ```js
 *    const Form = chakra('form') // returns a VNode you can use in the template directly
 *    ```
 *
 * 2. Chakra components can directly be styled upon creation using the options object of type `StyleResolverProps`
 *    This resolves style object for component styles defined in the theme.
 *
 *    Styling components using the chakra factory function can be done using the following keys from the theme:
 *    - `baseStyle`
 *    - `layerStyle`
 *    - `textStyle`
 *
 *    @example
 *    ```js
 *    const MyCustomButton = chakra('button', {
 *     baseStyle: {
         bg: 'papayawhip,
         color: 'red.500,
         px: 4,
         py: 3
       }
 *    })
 *    ```
 *    ```html
 *    <my-custom-button>Hello Papaya Button</my-custom-button>
 *    ```
 *
 *    See more about the style resolution in the `resolveStyles` function.
 *
 * 3. Chakra components created and styled using the `chakra` factory can be overriden in the template by applying
 *    style properties directly
 *
 *    @example
 *    ```html
 *    <my-custom-button bg="blue.400">
 *      Papaya button goes blue
 *    </my-custom-button>
 *    ```
 */
export declare const chakra: IChakraFactory;
interface GetStyleObject {
    (options: {
        baseStyle?: SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject);
    }): FunctionInterpolation<StyleResolverProps>;
}
export declare const toCSSObject: GetStyleObject;
interface StyledOptions extends StyleResolverOptions {
    label?: string;
    baseStyle?: SystemStyleObject | ((props: StyleResolverProps) => SystemStyleObject);
}
export declare function styled<T extends As, P = {}>(component: T, options: StyledOptions): import("@chakra-ui/vue-styled/src/types").StyledComponent<any>;
export declare type ChakraComponent<P = ChakraProps> = ComponentWithProps<As & P>;
declare type ChakraFactory = {
    <T extends ChakraTagOrComponent, P = {}>(component: T, options?: StyledOptions): ChakraComponent<P>;
};
export declare type HTMLChakraComponents<P> = {
    [Tag in DOMElements]: ChakraComponent<P>;
};
export declare const _chakra: ChakraFactory & HTMLChakraComponents<ChakraProps>;
export declare const resolveStyles: (resolvers?: StyleResolverOptions) => CSSObject;
export declare type ChakraFactoryProps = ChakraProps & StyleResolverProps & HTMLAttributes & ComponentCustomProps & JSX.IntrinsicAttributes & {
    [key: string]: any;
};
/**
 * @example
 * h(chakra(RouterLink, { to: 'https://vue.chakra-ui.com' }), {}, slots)
 */
declare type UserProvidedProps = {
    [key: string]: any;
};
declare type IChakraFactory = {
    [key in DOMElements]: DefineComponent<ChakraFactoryProps> | ComponentWithProps<ChakraFactoryProps>;
} & {
    (tag: ChakraTagOrComponent, options?: StyleResolverOptions & UserProvidedProps): DefineComponent<ChakraFactoryProps> | ComponentWithProps<ChakraFactoryProps>;
};
export {};
//# sourceMappingURL=chakra.d.ts.map