import { defineComponent, computed, createVNode, mergeProps } from 'vue';
import { SNAO, vueThemingProps } from '@chakra-ui/vue-utils';
import { keyframes, useStyleConfig, chakra } from '@chakra-ui/vue-system';
import { CVisuallyHidden } from '@chakra-ui/c-visually-hidden';
import { mergeWith } from '@chakra-ui/utils';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var spin = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var defaultSpinnerProps = {
  as: "div",
  emptyColor: "transparent",
  thickness: "2px",
  speed: "0.45s"
};
var CSpinner = defineComponent({
  props: _extends({
    as: SNAO,

    /**
     * The color of the empty area in the spinner
     */
    emptyColor: SNAO,

    /**
     * The color of the spinner
     */
    color: SNAO,

    /**
     * The thickness of the spinner
     * @example
     * ```html
     * <c-spinner thickness="4px"/>
     * ```
     */
    thickness: SNAO,

    /**
     * The speed of the spinner.
     * @example
     * ```html
     * <c-spinner speed="0.2s"/>
     * ```
     */
    speed: SNAO,

    /**
     * For accessibility, it is important to add a fallback loading text.
     * This text will be visible to screen readers.
     */
    label: SNAO
  }, vueThemingProps),
  setup: function setup(_props, _ref) {
    _ref.slots;
        var attrs = _ref.attrs;
    var props = computed(function () {
      return mergeWith({}, defaultSpinnerProps, _props);
    });
    var themingProps = computed(function () {
      return {
        colorScheme: props.value.colorScheme,
        variant: props.value.variant,
        size: props.value.size,
        styleConfig: props.value.styleConfig
      };
    });
    var styles = useStyleConfig("Spinner", themingProps);
    var spinnerStyles = computed(function () {
      return _extends({
        display: "inline-block",
        borderColor: "currentColor",
        borderStyle: "solid",
        borderRadius: "99999px",
        borderWidth: props.value.thickness,
        borderBottomColor: props.value.emptyColor,
        borderLeftColor: props.value.emptyColor,
        color: props.value.color,
        animation: spin + " " + props.value.speed + " linear infinite"
      }, styles.value);
    });
    return function () {
      return createVNode(chakra.div, mergeProps({
        "as": props.value.as,
        "__label": "spinner",
        "__css": spinnerStyles.value
      }, attrs), {
        "default": function _default() {
          return [props.value.label ? createVNode(CVisuallyHidden, null, {
            "default": function _default() {
              return [props.value.label];
            }
          }) : null];
        }
      });
    };
  }
});
var CSpinner$1 = CSpinner;

export { CSpinner$1 as CSpinner };
