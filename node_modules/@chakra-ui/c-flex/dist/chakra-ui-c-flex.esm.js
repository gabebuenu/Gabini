import { defineComponent, reactive, createVNode, mergeProps, isVNode } from 'vue';
import { chakra } from '@chakra-ui/vue-system';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var CFlex = defineComponent({
  props: {
    as: {
      type: [Object, String],
      "default": "div"
    },
    align: [Object, String, Array],
    justify: [Object, String, Array],
    wrap: [Object, String, Array],
    direction: {
      type: [Object, String, Array],
      "default": "row"
    },
    basis: [Object, String, Array],
    grow: [Object, String, Array],
    shrink: [Object, String, Array],
    size: String
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var styles = reactive({
      display: "flex",
      flexDirection: props.direction,
      alignItems: props.align,
      justifyContent: props.justify,
      flexWrap: props.wrap,
      flexBasis: props.basis,
      flexGrow: props.grow,
      flexShrink: props.shrink,
      h: props.size,
      w: props.size
    });
    return function () {
      return createVNode(chakra.div, mergeProps({
        "as": props.as,
        "__label": "flex",
        "__css": styles
      }, attrs), _isSlot(slots) ? slots : {
        "default": function _default() {
          return [slots];
        }
      });
    };
  }
});
var CFlex$1 = CFlex;

export { CFlex$1 as CFlex };
