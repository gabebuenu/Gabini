import { PropType } from "vue";
export declare type AlertVariant = "solid" | "subtle" | "left-accent" | "top-accent";
/**
 * CAlert component
 *
 * This is the container component for all Alert components.
 * It also provides state and context to it's compound components
 */
export declare const CAlert: import("vue").DefineComponent<{
    as: {
        type: PropType<"label" | "p" | "small" | "sub" | "sup" | "a" | "b" | "article" | "aside" | "blockquote" | "button" | "caption" | "cite" | "circle" | "code" | "dd" | "div" | "dl" | "dt" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "header" | "hr" | "iframe" | "img" | "input" | "kbd" | "li" | "mark" | "main" | "nav" | "ol" | "path" | "pre" | "q" | "rect" | "s" | "svg" | "section" | "select" | "strong" | "span" | "table" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "tr" | "ul">;
        default: string;
    };
    status: {
        type: PropType<"info" | "success" | "warning" | "error" | "loading">;
        default: string;
    };
    colorScheme: {
        type: PropType<string>;
    };
    styleConfig: {
        type: PropType<any>;
    };
    variant: {
        type: PropType<AlertVariant>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    as: {
        type: PropType<"label" | "p" | "small" | "sub" | "sup" | "a" | "b" | "article" | "aside" | "blockquote" | "button" | "caption" | "cite" | "circle" | "code" | "dd" | "div" | "dl" | "dt" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "header" | "hr" | "iframe" | "img" | "input" | "kbd" | "li" | "mark" | "main" | "nav" | "ol" | "path" | "pre" | "q" | "rect" | "s" | "svg" | "section" | "select" | "strong" | "span" | "table" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "tr" | "ul">;
        default: string;
    };
    status: {
        type: PropType<"info" | "success" | "warning" | "error" | "loading">;
        default: string;
    };
    colorScheme: {
        type: PropType<string>;
    };
    styleConfig: {
        type: PropType<any>;
    };
    variant: {
        type: PropType<AlertVariant>;
        default: string;
    };
}>>, {
    as: "label" | "p" | "small" | "sub" | "sup" | "a" | "b" | "article" | "aside" | "blockquote" | "button" | "caption" | "cite" | "circle" | "code" | "dd" | "div" | "dl" | "dt" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "header" | "hr" | "iframe" | "img" | "input" | "kbd" | "li" | "mark" | "main" | "nav" | "ol" | "path" | "pre" | "q" | "rect" | "s" | "svg" | "section" | "select" | "strong" | "span" | "table" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "tr" | "ul";
    status: "info" | "success" | "warning" | "error" | "loading";
    variant: AlertVariant;
}>;
/**
 * CAlertTitle component
 *
 * The title component for alerts
 */
export declare const CAlertTitle: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
/**Â«
 * CAlertDescription component
 *
 * The description component for alerts
 */
export declare const CAlertDescription: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
/**
 * CAlertIcon component
 *
 * The Icon component for alerts
 */
export declare const CAlertIcon: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
//# sourceMappingURL=alert.d.ts.map