'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var vueSystem = require('@chakra-ui/vue-system');
var vueUtils = require('@chakra-ui/vue-utils');
var utils = require('@chakra-ui/utils');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var fallbackIcon = {
  path: "\n    <g stroke=\"currentColor\" strokeWidth=\"1.5\">\n      <path\n        strokeLinecap=\"round\"\n        fill=\"none\"\n        d=\"M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25\"\n      />\n      <path\n        fill=\"currentColor\"\n        strokeLinecap=\"round\"\n        d=\"M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0\"\n      />\n      <circle fill=\"none\" strokeMiterlimit=\"10\" cx=\"12\" cy=\"12\" r=\"11.25\" />\n    </g>\n  ",
  viewBox: "0 0 24 24"
};
var iconProps = {
  as: "svg",
  size: "1em"
};
var _iconProps = {
  as: vueUtils.SNAO,
  size: vueUtils.SNAO,
  name: String
};
var CIcon = vue.defineComponent({
  name: "CIcon",
  props: _iconProps,
  setup: function setup(_props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var props = vue.computed(function () {
      return utils.mergeWith({}, iconProps, _props);
    });
    var icons = vue.inject("$chakraIcons");
    var icon = vue.computed(function () {
      var _props$value;

      return (icons == null ? void 0 : icons[(_props$value = props.value) == null ? void 0 : _props$value.name]) || fallbackIcon;
    });
    var hasDefaultSlot = vue.computed(function () {
      var _slots$default;

      return slots == null ? void 0 : slots["default"] == null ? void 0 : (_slots$default = slots["default"]()) == null ? void 0 : _slots$default.length;
    });
    var vnodeProps = vue.computed(function () {
      return _extends({
        w: props.value.size,
        h: props.value.size,
        display: "inline-block",
        lineHeight: "1em",
        flexShrink: 0,
        color: "currentColor"
      }, !hasDefaultSlot.value && {
        innerHTML: icon.value.path
      }, {
        focusable: false,
        viewBox: icon.value.viewBox || fallbackIcon.viewBox
      });
    });
    return function () {
      return vue.createVNode(vueSystem.chakra.svg, vue.mergeProps({
        "as": props.value.as,
        "__label": "icon"
      }, icon.value.attrs || {}, vnodeProps.value, attrs), _isSlot(slots) ? slots : {
        "default": function _default() {
          return [slots];
        }
      });
    };
  }
});
function createIconComponent(name) {
  var componentName = vueUtils.camelCase(name);
  var iconComponent = vue.defineComponent(function (props, _ref2) {
    var slots = _ref2.slots,
        attrs = _ref2.attrs;
    return function () {
      return vue.createVNode(CIcon, vue.mergeProps({
        "name": name
      }, props, attrs), _isSlot(slots) ? slots : {
        "default": function _default() {
          return [slots];
        }
      });
    };
  });
  iconComponent.name = componentName;
  return iconComponent;
}

exports.CIcon = CIcon;
exports.createIconComponent = createIconComponent;
exports.iconProps = iconProps;
