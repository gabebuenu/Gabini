import { PropType, TeleportProps } from "vue";
export interface CPortalProps extends Omit<TeleportProps, "to"> {
    /**
     * The target element to which to mount the portal
     */
    to?: string;
    /**
     * Determines whether the `CPortal` component is enabled or disabled
     */
    disabled?: boolean;
    /**
     * Name of the portal we use to label component with
     */
    label?: string;
}
/**
 * Chakra component to teleport it's children to pre-ordained target.
 *
 * If no target is given to the `CPortal` component via the `to` prop,
 * it will generate a target and append to the document body
 */
declare const CPortal: import("vue").DefineComponent<{
    to: PropType<string | undefined>;
    disabled: PropType<boolean | undefined>;
    label: PropType<string | undefined>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    to: PropType<string | undefined>;
    disabled: PropType<boolean | undefined>;
    label: PropType<string | undefined>;
}>>, {}>;
export default CPortal;
//# sourceMappingURL=portal.d.ts.map