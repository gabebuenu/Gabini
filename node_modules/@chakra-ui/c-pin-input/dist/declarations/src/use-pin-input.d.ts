export interface PinInputProps {
    id: string;
    value: string[];
    modelValue: string[];
    placeholder: string;
    type: "alphanumeric" | "numeric";
    otp: boolean;
    mask: boolean;
    blurOnComplete: boolean;
}
export declare const usePinInputMachine: (params: PinInputProps, emit: CallableFunction) => import("vue").ComputedRef<{
    value: string[];
    valueAsString: string;
    isValueComplete: boolean;
    setValue(value: string[]): void;
    clearValue(): void;
    setValueAtIndex(index: number, value: string): void;
    focus: () => void;
    rootProps: import("vue").HTMLAttributes & {
        key?: string | number | symbol | undefined;
        ref?: string | import("vue").Ref<any> | ((ref: Element | import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null) => void) | undefined;
    };
    labelProps: import("vue").LabelHTMLAttributes & {
        key?: string | number | symbol | undefined;
        ref?: import("vue").VNodeRef | undefined;
        ref_for?: boolean | undefined;
        ref_key?: string | undefined;
    };
    hiddenInputProps: import("vue").InputHTMLAttributes & {
        key?: string | number | symbol | undefined;
        ref?: import("vue").VNodeRef | undefined;
        ref_for?: boolean | undefined;
        ref_key?: string | undefined;
    };
    getInputProps({ index }: {
        index: number;
    }): import("vue").InputHTMLAttributes & {
        key?: string | number | symbol | undefined;
        ref?: import("vue").VNodeRef | undefined;
        ref_for?: boolean | undefined;
        ref_key?: string | undefined;
    };
}>;
//# sourceMappingURL=use-pin-input.d.ts.map