import { defineComponent, computed, createVNode, mergeProps } from 'vue';
import { useMultiStyleConfig, chakra } from '@chakra-ui/vue-system';
import { CIcon } from '@chakra-ui/c-icon';
import { filterUndefined } from '@chakra-ui/utils';
import { vueThemingProps, getValidChildren } from '@chakra-ui/vue-utils';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var CTagLabel = defineComponent({
  props: _extends({}, vueThemingProps),
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var themingProps = computed(function () {
      return filterUndefined({
        colorScheme: props.colorScheme,
        variant: props.variant,
        size: props.size,
        styleConfig: props.styleConfig
      });
    });
    var styles = useMultiStyleConfig("Tag", themingProps);
    return function () {
      return createVNode(chakra.span, mergeProps({
        "__css": styles.value.label,
        "noOfLines": 1
      }, attrs), {
        "default": function _default() {
          return getValidChildren(slots);
        }
      });
    };
  }
});

var TagProps = _extends({
  variantColor: String
}, vueThemingProps);

var CTagLeftIcon = defineComponent({
  setup: function setup(props, _ref2) {
    var attrs = _ref2.attrs;
    return function () {
      return createVNode(CIcon, mergeProps(attrs, {
        "marginEnd": "0.5rem"
      }), null);
    };
  }
});
var CTagRightIcon = defineComponent({
  setup: function setup(props, _ref3) {
    var attrs = _ref3.attrs;
    return function () {
      return createVNode(CIcon, mergeProps(attrs, {
        "marginStart": "0.5rem"
      }), null);
    };
  }
});

var CloseButtonProps = _extends({
  isDisabled: Boolean
}, vueThemingProps);

var CTagCloseButton = defineComponent({
  props: CloseButtonProps,
  setup: function setup(props, _ref4) {
    var slots = _ref4.slots,
        attrs = _ref4.attrs;
    var themingProps = computed(function () {
      return filterUndefined({
        colorScheme: props.colorScheme,
        variant: props.variant,
        size: props.size,
        styleConfig: props.styleConfig
      });
    });
    var styles = useMultiStyleConfig("Tag", themingProps);

    var buttonStyles = _extends({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      outline: "0"
    }, styles.value.closeButton);

    return function () {
      return createVNode(chakra.button, mergeProps({
        "aria-label": "close",
        "type": "button",
        "__css": buttonStyles
      }, attrs, {
        "disabled": props == null ? void 0 : props.isDisabled
      }), {
        "default": function _default() {
          return [slots["default"] ? function () {
            return getValidChildren(slots);
          } : function () {
            return createVNode(CIcon, {
              "name": "close"
            }, null);
          }];
        }
      });
    };
  }
});
var CTag = defineComponent({
  props: TagProps,
  setup: function setup(props, _ref5) {
    var slots = _ref5.slots,
        attrs = _ref5.attrs;
    var themingProps = computed(function () {
      return filterUndefined({
        colorScheme: props.colorScheme,
        variant: props.variant,
        size: props.size,
        styleConfig: props.styleConfig
      });
    });
    var styles = useMultiStyleConfig("Tag", themingProps);
    var tagContainerStyles = computed(function () {
      var _styles$value, _props$variantColor, _styles$value2, _styles$value2$contai;

      return _extends({}, (_styles$value = styles.value) == null ? void 0 : _styles$value.container, {
        bg: (_props$variantColor = props.variantColor) != null ? _props$variantColor : (_styles$value2 = styles.value) == null ? void 0 : (_styles$value2$contai = _styles$value2.container) == null ? void 0 : _styles$value2$contai.bg
      });
    });
    return function () {
      return createVNode(chakra.span, mergeProps({
        "__label": "tag",
        "aria-label": "tag",
        "__css": tagContainerStyles.value
      }, attrs), {
        "default": function _default() {
          return getValidChildren(slots);
        }
      });
    };
  }
});

export { CTag, CTagCloseButton, CTagLabel, CTagLeftIcon, CTagRightIcon };
