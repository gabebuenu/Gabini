/**
 * Hey! Welcome to @chakra-ui/vue-next CModal
 *
 * An accessible dialog modal component for chakra ui vue.
 *
 * @see Docs     https://next.vue.chakra-ui.com/modal
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue-next/blob/master/packages/c-modal/src/c-modal.ts
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2
 */
import { PropType, UnwrapRef } from "vue";
import { ComponentWithProps, DeepPartial, HTMLChakraProps } from "@chakra-ui/vue-system";
import { FocusLockProps } from "@chakra-ui/c-focus-lock";
import { UseModalOptions } from "./use-modal";
import { DialogMotionPreset } from "./modal-transitions";
import { Dict } from "@chakra-ui/utils";
import { CPortalProps } from "@chakra-ui/c-portal";
declare type ScrollBehavior = "inside" | "outside";
export interface ModalOptions extends Omit<FocusLockProps, "enabled" | "closeModal" | "isActive" | "handleEscape"> {
    /**
     *  If `true`, the modal will be centered on screen.
     * @default false
     */
    isCentered?: boolean;
    /**
     * Where scroll behavior should originate.
     * - If set to `inside`, scroll only occurs within the `ModalBody`.
     * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.
     *
     * @default "outside"
     */
    scrollBehavior?: ScrollBehavior;
}
export interface CModalProps extends Omit<UnwrapRef<UseModalOptions>, "closeModal" | "handleEscape" | "modelValue">, Pick<CPortalProps, "label">, ModalOptions {
    /**
     * If `true`, the modal will display
     *
     * @default true
     */
    modelValue: boolean;
    /**
     * If `false`, focus lock will be disabled completely.
     *
     * This is useful in situations where you still need to interact with
     * other surrounding elements.
     *
     * ðŸš¨Warning: We don't recommend doing this because it hurts the
     * accessibility of the modal, based on WAI-ARIA specifications.
     *
     * @default true
     */
    trapFocus?: boolean;
    /**
     * If `true`, the modal will autofocus the first enabled and interactive
     * element within the `ModalContent`
     *
     * @default true
     */
    autoFocus?: boolean;
    /**
     * If `true`, the modal will return focus to the element that triggered it when it closes.
     * @default true
     */
    returnFocusOnClose?: boolean;
    /**
     * If `true`, scrolling will be disabled on the `body` when the modal opens.
     *  @default true
     */
    blockScrollOnMount?: boolean;
    /**
     * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.
     * Defaults to `false`.
     */
    allowPinchZoom?: boolean;
    /**
     * If `true`, a `padding-right` will be applied to the body element
     * that's equal to the width of the scrollbar.
     *
     * This can help prevent some unpleasant flickering effect
     * and content adjustment when the modal opens
     */
    preserveScrollBarGap?: boolean;
    /**
     * The transition that should be used for the modal
     */
    motionPreset?: DialogMotionPreset;
    /**
     * Modal style config
     */
    styleConfig?: Dict;
    /**
     * Typescript helper for parent components
     */
    "onUpdate:modelValue"?: any;
    onClose?: any;
}
declare const ModalContextProvider: any, useModalContext: any;
export { ModalContextProvider, useModalContext };
export declare const modalProps: {
    modelValue: {
        type: PropType<boolean>;
        default: boolean;
    };
    id: PropType<string | undefined>;
    closeOnOverlayClick: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    closeOnEsc: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    useInert: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    autoFocus: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    trapFocus: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    initialFocusRef: PropType<(string | (() => unknown)) | undefined>;
    finalFocusRef: PropType<(string | (() => unknown)) | undefined>;
    returnFocusOnClose: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    blockScrollOnMount: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    allowPinchZoom: PropType<boolean | undefined>;
    preserveScrollBarGap: PropType<boolean | undefined>;
    scrollBehaviour: {
        type: PropType<ScrollBehavior | undefined>;
        default: string;
    };
    motionPreset: {
        type: PropType<DialogMotionPreset | undefined>;
        default: string;
    };
    "onUpdate:modelValue": {
        type: PropType<(arg: any) => any>;
    };
    label: {
        type: PropType<CPortalProps>;
        default: string;
    };
};
export declare const CModal: ComponentWithProps<CModalProps>;
export interface CModalContentProps extends HTMLChakraProps<"section"> {
    role?: string;
}
/**
 * ModalContent is used to group modal's content. It has all the
 * necessary `aria-*` properties to indicate that it is a modal
 */
export declare const CModalContent: ComponentWithProps<DeepPartial<CModalContentProps>>;
/**
 * CModalOverlay renders a backdrop behind the modal. It is
 * also used as a wrapper for the modal content for better positioning.
 *
 * @see Docs https://next.chakra-ui.com/docs/overlay/modal
 */
export declare const CModalOverlay: ComponentWithProps<DeepPartial<HTMLChakraProps<"div">>>;
/**
 * CModalHeader
 *
 * Component that houses the title of the modal.
 *
 * @see Docs https://next.vue.chakra-ui.com/docs/components/modal
 */
export declare const CModalHeader: ComponentWithProps<DeepPartial<HTMLChakraProps<"header">>>;
/**
 * CModalBody
 *
 * Component that houses the body of the modal.
 *
 * @see Docs https://next.vue.chakra-ui.com/docs/components/modal
 */
export declare const CModalBody: ComponentWithProps<DeepPartial<HTMLChakraProps<"div">>>;
/**
 * CModalFooter
 *
 * Component that houses the footer of the modal.
 *
 * @see Docs https://next.vue.chakra-ui.com/docs/components/modal
 */
export declare const CModalFooter: ComponentWithProps<DeepPartial<HTMLChakraProps<"footer">>>;
/**
 * CModalCloseButton
 *
 * Used to close the modal. It internally invokes the `closeModal` event,
 * but also emits the `@click` event to the user.
 *
 * @see Docs https://next.vue.chakra-ui.com/docs/components/modal
 */
export declare const CModalCloseButton: ComponentWithProps<DeepPartial<HTMLChakraProps<"button">>>;
//# sourceMappingURL=c-modal.d.ts.map