import { Ref, ToRefs, VNodeProps } from "vue";
import { FocusLockProps } from "@chakra-ui/c-focus-lock";
import { TemplateRef } from "@chakra-ui/vue-utils";
export interface UseModalOptions {
    /**
     * If `true`, the modal will be open.
     */
    modelValue: Ref<boolean>;
    /**
     * The `id` of the modal
     */
    id?: Ref<string>;
    /**
     * If `true`, the modal will close when the overlay is clicked
     * @default true
     */
    closeOnOverlayClick?: Ref<boolean>;
    /**
     * If `true`, the body will not be scollable when mounted
     * @default true
     */
    blockScrollOnMount?: Ref<boolean>;
    /**
     * The initial element to be focused when the focus lock is opened
     */
    initialFocusRef?: Ref<FocusLockProps["initialFocusRef"]>;
    /**
     * The initial element to be focused when the focus lock is opened
     */
    finalFocusRef?: Ref<FocusLockProps["finalFocusRef"]>;
    /**
     * If `true`, the modal will close when the `Esc` key is pressed
     * @default true
     */
    closeOnEsc?: Ref<boolean>;
    /**
     * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`
     * set to `true` so that screen readers can only see the `modal`.
     *
     * This is commonly known as making the other elements **inert**
     *
     *  @default true
     */
    useInert?: Ref<boolean>;
    /**
     * Emits event to close modal dialog
     */
    closeModal: () => void;
    /**
     * Emits `escape` event to parent scope
     */
    handleEscape: (event: KeyboardEvent) => void;
}
export interface MergedVNodeProps extends VNodeProps {
    ref: TemplateRef | ((el: TemplateRef | null) => void);
}
/**
 * Modal hook to manage accessibility and state for the modal
 * dialog components
 * @param options
 * @returns
 */
export declare function useModal(options: UseModalOptions): {
    modelValue: Ref<boolean>;
    headerId: import("vue").ComputedRef<string>;
    bodyId: import("vue").ComputedRef<string>;
    dialogRef: any;
    dialogRefEl: any;
    overlayRef: any;
    dialogProps: import("vue").ComputedRef<(context: any) => MergedVNodeProps>;
    hasHeader: Ref<boolean>;
    hasBody: Ref<boolean>;
    dialogContainerProps: import("vue").ComputedRef<(context: any) => MergedVNodeProps>;
};
export declare type UseModalReturn = Omit<ToRefs<ReturnType<typeof useModal>>, "dialogRef" | "overlayRef" | "closeModal">;
//# sourceMappingURL=use-modal.d.ts.map