import { PropType } from "vue";
import { HTMLChakraProps } from "@chakra-ui/vue-system";
declare type Placement = "left" | "right";
export interface CInputAddonProps extends HTMLChakraProps<"div"> {
    placement?: Placement;
}
/**
 * CInputAddon
 *
 * Element to append or prepend to an input
 */
export declare const CInputAddon: import("vue").DefineComponent<{
    placement: {
        type: PropType<Placement>;
        default: string;
    };
}, (() => JSX.Element) | (() => null), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    placement: {
        type: PropType<Placement>;
        default: string;
    };
}>>, {
    placement: Placement;
}>;
/**
 * CInputLeftAddon
 *
 * Element to prepend to the left of an input
 */
export declare const CInputLeftAddon: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
/**
 * CInputRightAddon
 *
 * Element to append to the right of an input
 */
export declare const CInputRightAddon: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export {};
//# sourceMappingURL=c-input-addon.d.ts.map