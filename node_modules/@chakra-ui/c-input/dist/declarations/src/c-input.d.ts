/**
 * Hey! Welcome to @chakra-ui/vue-next CInput
 *
 * Input component is a component that is used to get user input in a text field
 *
 * @see Docs     https://next.vue.chakra-ui.com/c-input
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue-next/blob/master/packages/c-input/src/c-input/c-input.ts
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2
 */
import { PropType } from "vue";
import { HTMLChakraProps, ThemingProps } from "@chakra-ui/vue-system";
import { FormControlOptions } from "@chakra-ui/c-form-control";
interface InputOptions {
    /**
     * The border color when the input is focused. Use color keys in `theme.colors`
     * @example
     * focusBorderColor = "blue.500"
     */
    focusBorderColor?: string;
    /**
     * The border color when the input is invalid. Use color keys in `theme.colors`
     * @example
     * errorBorderColor = "red.500"
     */
    errorBorderColor?: string;
    /**
     * If `true`, the input element will span the full width of its parent
     *
     * @deprecated
     * This component defaults to 100% width,
     *  please use the props `maxWidth` or `width` to configure
     */
    isFullWidth?: boolean;
}
declare type Omitted = "disabled" | "required" | "readOnly" | "size";
interface CInputNativeProps extends InputOptions, FormControlOptions {
}
export interface CInputProps extends Omit<HTMLChakraProps<"span">, Omitted>, CInputNativeProps, ThemingProps<"Input"> {
    modelValue: string;
}
export declare const CInput: import("vue").DefineComponent<{
    colorScheme: PropType<(string & {}) | "blue" | "cyan" | "gray" | "green" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "whiteAlpha" | "blackAlpha" | "linkedin" | "facebook" | "messenger" | "whatsapp" | "twitter" | "telegram" | undefined>;
    variant: PropType<any>;
    size: PropType<any>;
    styleConfig: PropType<Record<string, any> | undefined>;
    focusBorderColor: PropType<string | undefined>;
    isFullWidth: PropType<boolean | undefined>;
    errorBorderColor: PropType<string | undefined>;
    isRequired: PropType<boolean | undefined>;
    isDisabled: PropType<boolean | undefined>;
    isInvalid: PropType<boolean | undefined>;
    isReadOnly: PropType<boolean | undefined>;
    label: PropType<string | undefined>;
    id: PropType<string | undefined>;
    modelValue: PropType<string>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "update:modelValue" | "change")[], "input" | "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    colorScheme: PropType<(string & {}) | "blue" | "cyan" | "gray" | "green" | "orange" | "pink" | "purple" | "red" | "teal" | "yellow" | "whiteAlpha" | "blackAlpha" | "linkedin" | "facebook" | "messenger" | "whatsapp" | "twitter" | "telegram" | undefined>;
    variant: PropType<any>;
    size: PropType<any>;
    styleConfig: PropType<Record<string, any> | undefined>;
    focusBorderColor: PropType<string | undefined>;
    isFullWidth: PropType<boolean | undefined>;
    errorBorderColor: PropType<string | undefined>;
    isRequired: PropType<boolean | undefined>;
    isDisabled: PropType<boolean | undefined>;
    isInvalid: PropType<boolean | undefined>;
    isReadOnly: PropType<boolean | undefined>;
    label: PropType<string | undefined>;
    id: PropType<string | undefined>;
    modelValue: PropType<string>;
}>> & {
    onInput?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {}>;
export {};
//# sourceMappingURL=c-input.d.ts.map