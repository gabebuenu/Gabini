import { ComputedRef, HTMLAttributes, Ref } from "vue";
export interface UseDisclosureProps {
    /**
     * Defines open state from outside dynamic state being passed in.
     *
     * Overrides `defaultIsOpen` prop.
     */
    isOpen?: boolean;
    /**
     * Default state on render. Overriden by `isOpen` prop dynamically
     * if outside state should pass in a truthy value
     */
    defaultIsOpen?: boolean;
    /**
     * Additional actions to run when the targeted element is closed.
     */
    onClose?(): void;
    /**
     * Additional actions to run when the targeted element is opened.
     */
    onOpen?(): void;
    /**
     * Custom id to connect the toggle with the targeted element for accessibility.
     *
     * @default `disclosure-<uid>`
     */
    id?: string;
}
declare type ReturnUseDisclosureType = {
    /**
     * Returns current state
     *
     * @default false
     */
    isOpen: Ref<boolean>;
    /**
     * Actions run when opening targeted element.
     *
     * If target element is uncontrolled, then it includes toggle open.
     */
    open: () => void;
    /**
     * Actions run when closing targeted element.
     *
     * If target element is uncontrolled, then it includes toggle closed.
     */
    close: () => void;
    /**
     * Actions run when toggling open and closed.
     */
    toggle: () => void;
    /**
     * Check if external functionality controls the state of the targeted element
     */
    isControlled: boolean;
    /**
     * Computed object of Accessibility attributes and toggling event for the toggling element.
     *
     * `NOTE:` Pass this to the v-bind of the element.
     *
     * i.e. `v-bind='buttonProps'`
     */
    buttonProps: ComputedRef<{
        "aria-expanded": HTMLAttributes["aria-expanded"];
        "aria-controls": HTMLAttributes["aria-controls"];
        onClick: HTMLAttributes["onClick"];
    }>;
    /**
     * Computed object of Accessibility attributes to show/hide targeted element and for aria controls.
     *
     * `NOTE:` Pass this to the v-bind of the element.
     *
     * i.e. `v-bind='disclosureProps'`
     */
    disclosureProps: ComputedRef<{
        hidden: HTMLAttributes["hidden"];
        id: HTMLAttributes["id"];
    }>;
};
/**
 * Handles common open, close, or toggle scenarios.
 *
 * It can be used to control feedback components such as `Modal`, `AlertDialog`, `Drawer`, etc.
 */
export declare function useDisclosure(props?: UseDisclosureProps): ReturnUseDisclosureType;
export {};
//# sourceMappingURL=use-disclosure.d.ts.map