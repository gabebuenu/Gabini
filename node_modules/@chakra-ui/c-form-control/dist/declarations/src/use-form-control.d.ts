import { ToRefs, ComputedRef, VNodeProps } from "vue";
import { HTMLChakraProps, ThemingProps } from "@chakra-ui/vue-system";
export interface FormControlOptions {
    /**
     * If `true`, the form control will be required. This has 2 side effects:
     * - The `FormLabel` will show a required indicator
     * - The form element (e.g, Input) will have `aria-required` set to `true`
     */
    isRequired?: boolean;
    /**
     * If `true`, the form control will be disabled. This has 2 side effects:
     * - The `FormLabel` will have `data-disabled` attribute
     * - The form element (e.g, Input) will be disabled
     */
    isDisabled?: boolean;
    /**
     * If `true`, the form control will be invalid. This has 2 side effects:
     * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`
     * - The form element (e.g, Input) will have `aria-invalid` set to `true`
     */
    isInvalid?: boolean;
    /**
     * If `true`, the form control will be readonly
     */
    isReadOnly?: boolean;
}
export interface FormControlContext extends FormControlOptions {
    /**
     * The label text used to inform users as to what information is
     * requested for a text field.
     */
    label?: string;
    /**
     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).
     * - The form element (e.g Input) gets the `id`
     * - The form label id: `form-label-${id}`
     * - The form error text id: `form-error-text-${id}`
     * - The form helper text id: `form-helper-text-${id}`
     */
    id?: string;
    /**
     * The custom `for` attribute passed on to the CFormLabel for it's corresponding field
     */
    for?: string;
}
export declare function useFormControlProvider(props: ToRefs<FormControlContext>): {
    isRequired: import("vue").Ref<boolean | undefined> | undefined;
    isInvalid: import("vue").Ref<boolean | undefined> | undefined;
    isReadOnly: import("vue").Ref<boolean | undefined> | undefined;
    isDisabled: import("vue").Ref<boolean | undefined> | undefined;
    isFocused: import("vue").Ref<boolean>;
    onFocus: () => void;
    onBlur: () => void;
    hasFeedbackText: import("vue").Ref<boolean>;
    hasHelpText: import("vue").Ref<boolean>;
    id: ComputedRef<string>;
    labelId: ComputedRef<string>;
    feedbackId: ComputedRef<string>;
    helpTextId: ComputedRef<string>;
    rootProps: ComputedRef<{
        role: string;
    }>;
    labelProps: ComputedRef<{
        "data-focus": import("@chakra-ui/utils").Booleanish;
        "data-disabled": import("@chakra-ui/utils").Booleanish;
        "data-invalid": import("@chakra-ui/utils").Booleanish;
        "data-readonly": import("@chakra-ui/utils").Booleanish;
        id: string;
        for: string;
    }>;
    helperTextProps: ComputedRef<{
        id: string;
    }>;
    errorMessageProps: ComputedRef<{
        id: string;
        "aria-live": string;
    }>;
    requiredIndicatorProps: ComputedRef<{
        role: string;
        "aria-hidden": boolean;
    }>;
};
export declare type CFormControlProviderContext = ComputedRef<Omit<ReturnType<typeof useFormControlProvider>, "rootProps">>;
declare const FormControlProvider: (opts: CFormControlProviderContext) => void, useFormControlContext: (fallback?: CFormControlProviderContext | undefined) => CFormControlProviderContext;
export { FormControlProvider, useFormControlContext };
export interface CFormControlProps extends HTMLChakraProps<"div">, ThemingProps<"FormControl">, FormControlContext {
}
export interface UseFormControlProps<T extends VNodeProps> extends FormControlOptions {
    id?: string;
    onFocus?: (event: FocusEvent) => any;
    onBlur?: (event: FocusEvent) => any;
    disabled?: boolean;
    readOnly?: boolean;
    required?: boolean;
    "aria-describedby"?: string;
}
/**
 * Vue Composable that provides the props that should be spread on to
 * input fields (`input`, `select`, `textarea`, etc.).
 *
 * It provides a convenient way to control a form fields, validation
 * and helper text.
 */
export declare function useFormControl<T extends VNodeProps>(props: ToRefs<UseFormControlProps<T>>): ComputedRef<{
    id: string | undefined;
    "aria-describedby": string | undefined;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    disabled: boolean | undefined;
    readOnly: boolean | undefined;
    required: boolean | undefined;
    "aria-invalid": true | undefined;
    "aria-required": true | undefined;
    "aria-readonly": true | undefined;
}>;
export declare function useFormControlProps<T extends VNodeProps>(props: ToRefs<UseFormControlProps<T>>): {
    "aria-describedby": ComputedRef<string | undefined>;
    id: import("vue").Ref<string | undefined>;
    isDisabled: import("vue").Ref<boolean | undefined> | undefined;
    isReadOnly: import("vue").Ref<boolean | undefined> | undefined;
    isRequired: import("vue").Ref<boolean | undefined> | undefined;
    isInvalid: import("vue").Ref<boolean | undefined> | undefined;
    onFocus: (event: FocusEvent) => void;
    onBlur: (event: FocusEvent) => void;
};
//# sourceMappingURL=use-form-control.d.ts.map