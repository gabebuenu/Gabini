import { HTMLChakraProps, SystemProps, ComponentWithProps } from "@chakra-ui/vue-system";
import { PropType } from "vue";
export interface WrapProps extends HTMLChakraProps<"div"> {
    /**
     * The space between the each child (even if it wraps)
     * @type SystemProps["margin"]
     */
    spacing?: SystemProps["margin"];
    /**
     * The `justify-content` value (for cross-axis alignment)
     * @type SystemProps["justifyContent"]
     */
    justify?: SystemProps["justifyContent"];
    /**
     * The `align-items` value (for main axis alignment)
     * @type SystemProps["alignItems"]
     */
    align?: SystemProps["alignItems"];
    /**
     * The `flex-direction` value
     * @type SystemProps["flexDirection"]
     */
    direction?: SystemProps["flexDirection"];
    /**
     * If `true`, the children will be wrapped in a `WrapItem`
     */
    shouldWrapChildren?: boolean;
}
export declare const CWrapProps: {
    spacing: PropType<any>;
    justify: PropType<any>;
    align: PropType<any>;
    direction: PropType<any>;
    shouldWrapChildren: PropType<boolean | undefined>;
};
/**
 * Used to render texts or paragraphs.
 *
 * @see Docs https://vue.chakra-ui.com/docs/typography/text
 */
export declare const CWrap: ComponentWithProps<WrapProps>;
export interface WrapItemProps extends HTMLChakraProps<"li"> {
}
export declare const CWrapItem: import("vue").DefineComponent<{}, () => JSX.Element, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
//# sourceMappingURL=wrap.d.ts.map