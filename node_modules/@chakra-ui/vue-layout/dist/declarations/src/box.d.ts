import { HTMLChakraProps, DeepPartial, ComponentWithProps } from "@chakra-ui/vue-system";
export interface BoxProps extends HTMLChakraProps<"div"> {
}
/**
 * Box is the most abstract component on top of which other chakra
 * components are built. It renders a `div` element by default.
 *
 * @see Docs https://vue.chakra-ui.com/docs/layout/box
 */
export declare const CBox: ComponentWithProps<DeepPartial<BoxProps>>;
/**
 * As a constraint, you can't pass size related props
 * Only `size` would be allowed
 */
declare type Omitted = "size" | "boxSize" | "width" | "height" | "w" | "h";
export interface SquareProps extends Omit<BoxProps, Omitted> {
    /**
     * The size (width and height) of the square
     */
    size?: BoxProps["width"];
    /**
     * If `true`, the content will be centered in the square
     */
    centerContent?: boolean;
}
/**
 * CSquare is the `CBox` component implemented as a square
 *
 * @see Docs https://vue.chakra-ui.com/docs/layout/box
 */
export declare const CSquare: ComponentWithProps<DeepPartial<SquareProps>>;
/**
 * CCircle is the `CBox` component implemented as a circle
 *
 * @see Docs https://vue.chakra-ui.com/docs/layout/box
 */
export declare const CCircle: ComponentWithProps<DeepPartial<SquareProps>>;
export {};
//# sourceMappingURL=box.d.ts.map