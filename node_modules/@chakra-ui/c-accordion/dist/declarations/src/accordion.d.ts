import { ComputedRef } from "vue";
import * as accordion from "@zag-js/accordion";
import { ComponentWithProps, HTMLChakraProps, ThemingProps, DeepPartial } from "@chakra-ui/vue-system";
export declare type ExpandedValues = string | string[];
export interface CAccordionProps extends HTMLChakraProps<"div">, ThemingProps<"Accordion"> {
    /**
     * If `true`, multiple accordion items can be expanded at once.
     */
    allowMultiple?: boolean;
    /**
     * If `true`, any expanded accordion item can be collapsed again.
     */
    allowToggle?: boolean;
    /**
     * The index(es) of the expanded accordion item
     */
    index?: ExpandedValues;
    defaultIndex?: ExpandedValues;
    /**
     * The initial index(es) of the expanded accordion item
     */
    defaultOpen?: ExpandedValues;
    /**
     * If `true`, height animation and transitions will be disabled.
     */
    reduceMotion: boolean;
}
export interface CAccordionContext {
    api: ComputedRef<ReturnType<typeof accordion.connect>>;
    reduceMotion: ComputedRef<boolean>;
}
export declare const CAccordion: ComponentWithProps<DeepPartial<CAccordionProps>>;
export interface CAccordionItemProps extends HTMLChakraProps<"div"> {
    disabled?: boolean;
}
export interface CAccordionItemContext {
    id: ComputedRef<string>;
    isOpen: ComputedRef<boolean>;
    isDisabled: ComputedRef<boolean | undefined>;
}
export declare const CAccordionItem: ComponentWithProps<CAccordionItemProps>;
export interface CAccordionButtonProps extends HTMLChakraProps<"button"> {
    disabled?: boolean;
}
export declare const CAccordionButton: ComponentWithProps<CAccordionButtonProps>;
export interface CAccordionPanelProps extends HTMLChakraProps<"div"> {
    disabled?: boolean;
}
export declare const CAccordionPanel: ComponentWithProps<CAccordionPanelProps>;
export interface CAccordionIconProps extends HTMLChakraProps<"svg"> {
}
export declare const CAccordionIcon: ComponentWithProps<CAccordionIconProps>;
//# sourceMappingURL=accordion.d.ts.map