'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var accordion = require('@zag-js/accordion');
var vue$1 = require('@zag-js/vue');
var vueSystem = require('@chakra-ui/vue-system');
var vueComposables = require('@chakra-ui/vue-composables');
var vueUtils = require('@chakra-ui/vue-utils');
var utils = require('@chakra-ui/utils');
var cMotion = require('@chakra-ui/c-motion');
var cIcon = require('@chakra-ui/c-icon');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var accordion__namespace = /*#__PURE__*/_interopNamespace(accordion);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var _excluded = ["hidden"];

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}

var _createContext = vueUtils.createContext({
  name: "AccordionContext",
  strict: true
}),
    AccordionProvider = _createContext[0],
    useAccordion = _createContext[1];

var CAccordion = vue.defineComponent({
  name: "CAccordion",
  props: _extends({
    as: {
      type: [String],
      "default": "div"
    },
    allowMultiple: Boolean,
    allowToggle: Boolean,
    index: vueUtils.SNAO,
    defaultIndex: vueUtils.SNAO,
    reduceMotion: {
      type: Boolean,
      "default": false
    }
  }, vueUtils.vueThemingProps),
  setup: function setup(_props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var uid = vue.ref(vueUtils.genId());
    var context = vue.computed(function () {
      return {
        multiple: _props.allowMultiple,
        collapsible: _props.allowToggle
      };
    });

    var _useMachine = vue$1.useMachine(accordion__namespace.machine({
      id: uid.value
    }), {
      context: context
    }),
        state = _useMachine[0],
        send = _useMachine[1];

    var apiRef = vue.computed(function () {
      return accordion__namespace.connect(state.value, send, vue$1.normalizeProps);
    });
    var props = vue.computed(function () {
      return utils.mergeWith({}, _props, attrs);
    });
    var themingProps = vue.computed(function () {
      return utils.filterUndefined({
        colorScheme: props.value.colorScheme,
        variant: props.value.variant,
        size: props.value.size,
        styleConfig: props.value.styleConfig
      });
    });
    var styles = vueSystem.useMultiStyleConfig("Accordion", themingProps);
    var reduceMotion = vue.computed(function () {
      return props.value.reduceMotion;
    });
    AccordionProvider({
      api: apiRef,
      reduceMotion: reduceMotion
    });
    vueSystem.StylesProvider(styles);
    return function () {
      var api = apiRef.value;
      return vue.createVNode(vueSystem.chakra.div, {
        "sx": {
          "> div": styles.value.root
        }
      }, {
        "default": function _default() {
          return vue.createVNode("div", api.rootProps, [vueUtils.getValidChildren(slots)]);
        }
      });
    };
  }
});

var _createContext2 = vueUtils.createContext({
  name: "AccordionItemContext",
  strict: true
}),
    AccordionItemProvider = _createContext2[0],
    useAccordionItem = _createContext2[1];

var CAccordionItem = vue.defineComponent({
  name: "CAccordionItem",
  props: {
    disabled: Boolean,
    value: String
  },
  setup: function setup(props, _ref2) {
    var slots = _ref2.slots,
        attrs = _ref2.attrs;

    var _uid = vueComposables.useId(undefined, "accordion-item");

    var id = vue.computed(function () {
      return attrs.id || _uid.value;
    });

    var _useAccordion = useAccordion(),
        api = _useAccordion.api;

    var itemValue = vue.computed(function () {
      return id.value;
    });
    var state = vue.computed(function () {
      return api.value.getItemState({
        value: itemValue.value
      });
    });
    var isOpen = vue.computed(function () {
      return state.value.isOpen;
    });
    var isDisabled = vue.computed(function () {
      return props.disabled;
    });
    AccordionItemProvider({
      id: id,
      isOpen: isOpen,
      isDisabled: isDisabled
    });
    var styles = vueSystem.useStyles();
    var containerStyles = vue.computed(function () {
      return _extends({}, styles.value.container, {
        overflowAnchor: "none"
      });
    });
    return function () {
      var _slot;

      return vue.createVNode(vueSystem.chakra.div, vue.mergeProps({
        "__css": containerStyles.value
      }, api.value.getItemProps({
        value: itemValue.value,
        disabled: props.disabled
      }), attrs), _isSlot(_slot = vueUtils.getValidChildren(slots)) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    };
  }
});
var CAccordionButton = vue.defineComponent({
  name: "CAccordionButton",
  props: {
    disabled: Boolean
  },
  setup: function setup(props, _ref3) {
    var slots = _ref3.slots,
        attrs = _ref3.attrs;

    var _useAccordionItem = useAccordionItem(),
        id = _useAccordionItem.id;

    var _useAccordion2 = useAccordion(),
        api = _useAccordion2.api;

    var styles = vueSystem.useStyles();
    var buttonStyles = vue.computed(function () {
      return _extends({
        display: "flex",
        alignItems: "center",
        width: "100%",
        outline: 0
      }, styles.value.button);
    });
    return function () {
      return vue.createVNode(vueSystem.chakra.button, vue.mergeProps(api.value.getTriggerProps({
        value: id.value,
        disabled: props.disabled
      }), {
        "__css": buttonStyles.value
      }, attrs), {
        "default": function _default() {
          return vueUtils.getValidChildren(slots);
        }
      });
    };
  }
});
var CAccordionPanel = vue.defineComponent({
  name: "CAccordionPanel",
  props: {
    disabled: Boolean
  },
  setup: function setup(props, _ref4) {
    var slots = _ref4.slots,
        attrs = _ref4.attrs;

    var _useAccordionItem2 = useAccordionItem(),
        id = _useAccordionItem2.id,
        isOpen = _useAccordionItem2.isOpen;

    var _useAccordion3 = useAccordion(),
        api = _useAccordion3.api;

    var styles = vueSystem.useStyles();
    return function () {
      var _slot2;

      var _api$value$getContent = api.value.getContentProps({
        value: id.value,
        disabled: props.disabled
      });
          _api$value$getContent.hidden;
          var contentProps = _objectWithoutPropertiesLoose(_api$value$getContent, _excluded);

      return vue.createVNode(cMotion.CCollapse, {
        "isOpen": isOpen.value
      }, {
        "default": function _default() {
          return [vue.createVNode(vueSystem.chakra.div, vue.mergeProps(contentProps, {
            "__css": styles.value.panel
          }, attrs), _isSlot(_slot2 = vueUtils.getValidChildren(slots)) ? _slot2 : {
            "default": function _default() {
              return [_slot2];
            }
          })];
        }
      });
    };
  }
});
var CAccordionIcon = vue.defineComponent({
  name: "CAccordionIcon",
  setup: function setup(props, _ref5) {
    _ref5.slots;
        var attrs = _ref5.attrs;

    var _useAccordionItem3 = useAccordionItem(),
        isOpen = _useAccordionItem3.isOpen,
        isDisabled = _useAccordionItem3.isDisabled;

    var _useAccordion4 = useAccordion(),
        reduceMotion = _useAccordion4.reduceMotion;

    var styles = vueSystem.useStyles();
    var iconStyles = vue.computed(function () {
      return _extends({
        opacity: isDisabled.value ? 0.4 : 1,
        transform: isOpen.value ? "rotate(-180deg)" : undefined,
        transition: reduceMotion.value ? undefined : "transform 0.2s",
        transformOrigin: "center"
      }, styles.value.icon);
    });
    return function () {
      return vue.createVNode(cIcon.CIcon, vue.mergeProps({
        "viewBox": "0 0 24 24",
        "aria-hidden": true,
        "__css": iconStyles.value
      }, attrs), {
        "default": function _default() {
          return [vue.createVNode("path", {
            "fill": "currentColor",
            "d": "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
          }, null)];
        }
      });
    };
  }
});

exports.CAccordion = CAccordion;
exports.CAccordionButton = CAccordionButton;
exports.CAccordionIcon = CAccordionIcon;
exports.CAccordionItem = CAccordionItem;
exports.CAccordionPanel = CAccordionPanel;
