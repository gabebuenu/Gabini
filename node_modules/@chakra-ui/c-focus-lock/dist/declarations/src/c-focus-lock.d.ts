/**
 *
 * `@chakra-ui/c-focus-lock` component.
 *
 * Some known issues:
 *
 * At this point in time, there seems to be a weird bug
 * where focus is first sent to the body before it
 * is sent into the focus trap.
 *
 * I think this might be an issue later.
 *
 * I did some inspection around this issue for some time
 * and my suspicion is that it is happening inside the library
 */
import { PropType } from "vue";
declare type RefProp = (() => HTMLElement | string | object | undefined | unknown) | string;
export interface FocusLockProps {
    /**
     * Element to which to send focus when focus trap has been deacivated
     */
    finalFocusRef?: RefProp;
    /**
     * Element to which to send focus when focus trap has been activated
     */
    initialFocusRef?: RefProp;
    /**
     * If `true`, the first focuable element within the `contentRef`
     * will be auto-focused once `CFocusLock` mounts
     */
    autoFocus?: boolean;
}
export declare const CFocusLock: import("vue").DefineComponent<{
    finalFocusRef: PropType<RefProp | undefined>;
    initialFocusRef: PropType<RefProp | undefined>;
    autoFocus: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    escapeDeactivates: {
        type: PropType<boolean>;
        default: boolean;
    };
    clickOutsideDeactivates: {
        type: PropType<boolean>;
        default: boolean;
    };
    allowOutsideClick: {
        type: PropType<boolean>;
        default: boolean;
    };
    restoreFocus: {
        type: PropType<boolean>;
        default: boolean;
    };
}, () => JSX.Element | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("activate" | "deactivate")[], "activate" | "deactivate", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    finalFocusRef: PropType<RefProp | undefined>;
    initialFocusRef: PropType<RefProp | undefined>;
    autoFocus: {
        type: PropType<boolean | undefined>;
        default: boolean;
    };
    escapeDeactivates: {
        type: PropType<boolean>;
        default: boolean;
    };
    clickOutsideDeactivates: {
        type: PropType<boolean>;
        default: boolean;
    };
    allowOutsideClick: {
        type: PropType<boolean>;
        default: boolean;
    };
    restoreFocus: {
        type: PropType<boolean>;
        default: boolean;
    };
}>> & {
    onActivate?: ((...args: any[]) => any) | undefined;
    onDeactivate?: ((...args: any[]) => any) | undefined;
}, {
    autoFocus: boolean | undefined;
    escapeDeactivates: boolean;
    clickOutsideDeactivates: boolean;
    allowOutsideClick: boolean;
    restoreFocus: boolean;
}>;
export {};
//# sourceMappingURL=c-focus-lock.d.ts.map