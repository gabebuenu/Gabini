import { PropType } from "vue";
export interface CollapseOptions {
    /**
     * If `true`, the opacity of the content will be animated
     * @default true
     */
    animateOpacity: boolean;
    /**
     * The height you want the content in its collapsed state.
     * @default 0
     */
    startingHeight: number | string;
    /**
     * The height you want the content in its expanded state.
     * @default "auto"
     */
    endingHeight: number | string;
    /**
     * The current disclosure state of the CColapse component
     * @default true
     */
    isOpen: boolean;
    /**
     * Unmounts it's children after the leave transition
     * @default true
     */
    unmountOnExit: boolean;
}
/**
 * CCollapse
 *
 * It renders a `span` when it matches the current link. Otherwise,
 * it renders an anchor tag.
 */
export declare const CCollapse: import("vue").DefineComponent<{
    isOpen: {
        type: PropType<boolean>;
        default: boolean;
    };
    animateOpacity: {
        type: PropType<boolean>;
        default: boolean;
    };
    startingHeight: {
        type: PropType<string | number>;
        default: number;
    };
    endingHeight: {
        type: PropType<string | number>;
        default: string;
    };
    unmountOnExit: {
        type: PropType<boolean>;
        default: boolean;
    };
    transitionId: {
        type: StringConstructor;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("entered" | "left")[], "left" | "entered", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    isOpen: {
        type: PropType<boolean>;
        default: boolean;
    };
    animateOpacity: {
        type: PropType<boolean>;
        default: boolean;
    };
    startingHeight: {
        type: PropType<string | number>;
        default: number;
    };
    endingHeight: {
        type: PropType<string | number>;
        default: string;
    };
    unmountOnExit: {
        type: PropType<boolean>;
        default: boolean;
    };
    transitionId: {
        type: StringConstructor;
    };
}>> & {
    onEntered?: ((...args: any[]) => any) | undefined;
    onLeft?: ((...args: any[]) => any) | undefined;
}, {
    isOpen: boolean;
    animateOpacity: boolean;
    startingHeight: string | number;
    endingHeight: string | number;
    unmountOnExit: boolean;
}>;
//# sourceMappingURL=c-collapse.d.ts.map