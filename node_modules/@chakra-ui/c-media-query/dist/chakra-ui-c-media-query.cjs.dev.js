'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var vueUtils = require('@chakra-ui/vue-utils');
var core = require('@vueuse/core');
var vueSystem = require('@chakra-ui/vue-system');

var CVisibility = vue.defineComponent({
  props: {
    breakpoint: {
      type: String,
      required: true
    },
    hide: Boolean
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var show = core.useMediaQuery(props.breakpoint);
    var isVisible = vue.computed(function () {
      return props.hide ? !show.value : show.value;
    });
    return function () {
      return isVisible.value ? slots["default"]() : null;
    };
  }
});

var getBreakpoint = function getBreakpoint(theme, value) {
  var _theme$breakpoints$va, _theme$breakpoints;

  return (_theme$breakpoints$va = theme == null ? void 0 : (_theme$breakpoints = theme.breakpoints) == null ? void 0 : _theme$breakpoints[value]) != null ? _theme$breakpoints$va : value;
};

/**
 * Returns a media query value based on theme breakpoint or given query string.
 */
function useQuery(props) {
  var _props$breakpoint = props.breakpoint,
      breakpoint = _props$breakpoint === void 0 ? "" : _props$breakpoint,
      below = props.below,
      above = props.above;
  var theme = vueSystem.useTheme();
  var bpBelow = getBreakpoint(theme, below);
  var bpAbove = getBreakpoint(theme, above);
  var query = vue.computed(function () {
    if (bpAbove) return "(min-width: " + bpAbove + ")";
    if (bpBelow) return "(max-width: " + bpBelow + ")";
    return breakpoint;
  });
  return query;
}

/**
 * Wrapper component to show child elements based on breakpoint value
 */
var CShow = vue.defineComponent({
  props: {
    breakpoint: {
      type: String
    },
    above: {
      type: String
    },
    below: {
      type: String
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var query = useQuery(props);
    return function () {
      return vue.createVNode(CVisibility, {
        "breakpoint": query.value
      }, {
        "default": function _default() {
          return vueUtils.getValidChildren(slots);
        }
      });
    };
  }
});

/**
 * Wrapper component to hide child elements based on breakpoint value
 */
var CHide = vue.defineComponent({
  props: {
    breakpoint: {
      type: String
    },
    above: {
      type: String
    },
    below: {
      type: String
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var query = useQuery(props);
    return function () {
      return vue.createVNode(CVisibility, {
        "breakpoint": query.value,
        "hide": true
      }, {
        "default": function _default() {
          return vueUtils.getValidChildren(slots);
        }
      });
    };
  }
});

exports.CHide = CHide;
exports.CShow = CShow;
exports.CVisibility = CVisibility;
exports.useQuery = useQuery;
