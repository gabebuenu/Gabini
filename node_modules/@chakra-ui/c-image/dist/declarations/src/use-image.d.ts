import { ComputedRef, ImgHTMLAttributes } from "vue";
declare type NativeImageProps = ImgHTMLAttributes;
export interface UseImageProps {
    /**
     * The image `src` attribute
     */
    src?: string;
    /**
     * The image `srcset` attribute
     */
    srcSet?: string;
    /**
     * The image `sizes` attribute
     */
    sizes?: string;
    /**
     * A callback for when the image `src` has been loaded
     */
    onLoad?: NativeImageProps["onLoad"];
    /**
     * A callback for when there was an error loading the image `src`
     */
    onError?: NativeImageProps["onError"];
    /**
     * If `true`, opt out of the `fallbackSrc` logic and use as `img`
     */
    ignoreFallback?: boolean | ComputedRef<boolean | undefined>;
    /**
     * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.
     * This tells the browser to request cross-origin access when trying to download the image data.
     */
    crossOrigin?: HTMLImageElement["crossOrigin"];
    loading?: HTMLImageElement["loading"];
}
declare type Status = "failed" | "pending" | "loaded";
export declare type FallbackStrategy = "onError" | "beforeLoadOrError";
export declare function useImage(props: UseImageProps): ComputedRef<Status>;
export declare const shouldShowFallbackImage: (status: Status, fallbackStrategy: FallbackStrategy) => boolean;
export {};
//# sourceMappingURL=use-image.d.ts.map