import { defineComponent, computed, h, cloneVNode, createVNode, mergeProps, isVNode } from 'vue';
import { useMultiStyleConfig, StylesProvider, chakra, useStyles } from '@chakra-ui/vue-system';
import { filterUndefined } from '@chakra-ui/utils';
import { isObjectComponent, getValidChildren, SNAO, SNA, vueThemingProps } from '@chakra-ui/vue-utils';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

/**
 * CBreadcrumb is used to render a breadcrumb navigation landmark.
 * It renders a `nav` element with `aria-label` set to `breadcrumb`
 *
 * @see Docs https://next.vue.chakra-ui.com/breadcrumb
 */
var CBreadcrumb = defineComponent(function (props, _ref) {
  var attrs = _ref.attrs,
      slots = _ref.slots;
  var themingProps = computed(function () {
    return filterUndefined({
      colorScheme: props.colorScheme,
      variant: props.variant,
      size: props.size,
      styleConfig: props.styleConfig
    });
  });
  var styles = useMultiStyleConfig("Breadcrumb", themingProps);
  StylesProvider(styles);
  var separator = computed(function () {
    if (slots.separator) {
      return slots == null ? void 0 : slots.separator == null ? void 0 : slots.separator();
    } else {
      return typeof props.separator === "string" ? props.separator : isObjectComponent(props.separator) ? // TODO:
      // Add support for
      // object components. ATM,
      // This computed property will only
      // work for functional components provided as
      // separators
      h(function () {
        return props.separator;
      }) : h(props.separator);
    }
  });
  return function () {
    var validChildren = getValidChildren(slots);
    var count = validChildren.length;
    var children = validChildren.map(function (vnode, index) {
      return cloneVNode(vnode, {
        separator: separator.value,
        spacing: props.spacing,
        isLastChild: count === index + 1
      });
    });
    return createVNode(chakra.nav, mergeProps({
      "as": props.as,
      "__label": "breadcrumb",
      "aria-label": "breadcrumb",
      "__css": styles.value.container
    }, attrs), {
      "default": function _default() {
        return [createVNode(chakra.ol, {
          "__label": "breadcrumb__list"
        }, {
          "default": function _default() {
            return children;
          }
        })];
      }
    });
  };
}); // @ts-ignore "name" property is typically read-only for functional components

CBreadcrumb.name = "CBreadcrumb";
CBreadcrumb.props = _extends({
  separator: {
    type: SNAO,
    "default": "/"
  },
  spacing: {
    type: SNA,
    "default": "0.5rem"
  },
  as: {
    type: [String, Object],
    "default": "nav"
  }
}, vueThemingProps);
/**
 * CBreadcrumbSeparator
 */

/**
 * The `CBreadcrumbSeparator` component is the separator for
 * each breacrumb item.
 */
var CBreadcrumbSeparator = defineComponent({
  props: {
    spacing: CBreadcrumb.props.spacing
  },
  setup: function setup(props, _ref2) {
    var attrs = _ref2.attrs,
        slots = _ref2.slots;
    var styles = useStyles();
    var separatorStyles = computed(function () {
      return _extends({
        display: "flex",
        mx: props.spacing
      }, styles.value.separator);
    });
    return function () {
      return createVNode(chakra.span, mergeProps({
        "role": "presentation",
        "__label": "breadcrumb__separator"
      }, attrs, {
        "__css": separatorStyles.value
      }), _isSlot(slots) ? slots : {
        "default": function _default() {
          return [slots];
        }
      });
    };
  }
}); // @ts-ignore "name" property is typically read-only for functional components

CBreadcrumbSeparator.name = "CBreadcrumbSeparator";
/**
 * CBreadcrumbItem
 */

var CBreadcrumbItem = defineComponent(function (props, _ref3) {
  _ref3.attrs;
      var slots = _ref3.slots;
  var styles = useStyles();
  var itemStyles = computed(function () {
    return _extends({
      display: "inline-flex",
      alignItems: "center"
    }, styles.value.item);
  });
  return function () {
    var validChildren = getValidChildren(slots);
    var children = validChildren.map(function (vnode) {
      // @ts-expect-error The "name" property is not typed on `VNodeTypes` but we need to access it during runtime
      if (vnode.type.name === "CBreadcrumbLink") {
        return cloneVNode(vnode, {
          isCurrentPage: props.isCurrentPage
        });
      } // @ts-expect-error The "name" property is not typed on `VNodeTypes` but we need to access it during runtime


      if (vnode.type.name === "CBreadcrumbSeparator") {
        return cloneVNode(vnode, {
          spacing: props.spacing,
          children: vnode.children || {
            "default": function _default() {
              return props.separator;
            }
          }
        });
      }

      return vnode;
    });
    return createVNode(chakra.li, {
      "__label": "breadcrumb__list-item",
      "__css": itemStyles.value
    }, {
      "default": function _default() {
        return [children, !props.isLastChild && createVNode(CBreadcrumbSeparator, {
          "spacing": props.spacing
        }, {
          "default": function _default() {
            return props.separator;
          }
        })];
      }
    });
  };
}); // @ts-ignore "name" property is typically read-only for functional components

CBreadcrumbItem.name = "CBreadcrumbItem";
CBreadcrumbItem.props = _extends({}, CBreadcrumb.props, {
  isLastChild: Boolean,
  isCurrentPage: Boolean
});
/**
 * CBreadcrumbLink
 */

/**
 * BreadcrumbLink link.
 *
 * It renders a `span` when it matches the current link. Otherwise,
 * it renders an anchor tag.
 */
var CBreadcrumbLink = defineComponent(function (props, _ref4) {
  var attrs = _ref4.attrs,
      slots = _ref4.slots;
  var styles = useStyles();
  return function () {
    if (props.isCurrentPage) {
      return createVNode(chakra.span, mergeProps({
        "__label": "breadcrumb__link",
        "aria-current": "page",
        "__css": styles.value.link,
        "as": props.as
      }, attrs), _isSlot(slots) ? slots : {
        "default": function _default() {
          return [slots];
        }
      });
    }

    return createVNode(chakra.a, mergeProps({
      "__label": "breadcrumb__link",
      "as": props.as,
      "__css": styles.value.link
    }, attrs), _isSlot(slots) ? slots : {
      "default": function _default() {
        return [slots];
      }
    });
  };
}); // @ts-ignore "name" property is typically read-only for functional components

CBreadcrumbLink.name = "CBreadcrumbLink";
CBreadcrumbLink.props = {
  isCurrentPage: Boolean
};

export { CBreadcrumb, CBreadcrumbItem, CBreadcrumbLink, CBreadcrumbSeparator };
