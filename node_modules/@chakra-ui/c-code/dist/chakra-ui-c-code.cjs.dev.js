'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var vueUtils = require('@chakra-ui/vue-utils');
var vueSystem = require('@chakra-ui/vue-system');
var utils = require('@chakra-ui/utils');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var CCode = vue.defineComponent({
  props: _extends({
    as: {
      type: [Object, String],
      "default": "code"
    }
  }, vueUtils.vueThemingProps),
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    var themingProps = vue.computed(function () {
      return utils.filterUndefined({
        colorScheme: props.colorScheme,
        variant: props.variant,
        size: props.size,
        styleConfig: props.styleConfig
      });
    });
    var styles = vueSystem.useStyleConfig("Code", themingProps);
    return function () {
      return vue.createVNode(vueSystem.chakra.code, vue.mergeProps({
        "as": props.as,
        "__css": _extends({
          display: "inline-block",
          verticalAlign: "middle",
          fontSize: "sm",
          px: "0.2em",
          fontFamily: "mono",
          rounded: "sm"
        }, styles.value)
      }, attrs), {
        "default": function _default() {
          return vueUtils.getValidChildren(slots);
        }
      });
    };
  }
});
var CCode$1 = CCode;

exports.CCode = CCode$1;
