'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var bodyScrollLock = require('body-scroll-lock');
var vueUtils = require('@chakra-ui/vue-utils');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var BodyScrollLockDirective = {
  mounted: function mounted(el, binding) {
    if (el && binding.value) {
      bodyScrollLock.disableBodyScroll(el);
    } else if (el && !binding.value) {
      bodyScrollLock.enableBodyScroll(el);
    }
  },
  updated: function updated(el, binding) {
    if (el && binding.value) {
      bodyScrollLock.disableBodyScroll(el);
    } else if (el && !binding.value) {
      bodyScrollLock.enableBodyScroll(el);
    }
  },
  unmounted: function unmounted(el, binding) {
    if (el) {
      bodyScrollLock.enableBodyScroll(el);
    }
  }
};

var CScrollLock = vue.defineComponent({
  name: "CScrollLock",
  props: {
    enabled: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots,
        attrs = _ref.attrs;
    return function () {
      var _ref2 = slots["default"] == null ? void 0 : slots["default"]({}),
          firstChild = _ref2[0];

      if (!firstChild) {
        console.warn("[chakra-ui:focus-lock]: Focus lock component expects at least and only one child element.");
        return;
      }

      var scrollLockVNode = vue.cloneVNode(firstChild, _extends({}, attrs, {
        "data-chakra-scroll-lock": "" + props.enabled
      }));
      return vue.withDirectives(scrollLockVNode, [[BodyScrollLockDirective, props.enabled]]);
    };
  }
});

/**
 * Enables body scroll locking
 * @param enable whether the scroll lock should be active or not
 * @param options BodyScrollLock options
 * @returns Ref of element to exclude from body scroll lock
 */

function useBodyScrollLock(enable, options) {
  var _useRef = vueUtils.useRef(),
      scrollLockRef = _useRef[0],
      scrollLockEl = _useRef[1];

  vue.watch([scrollLockEl, enable], function (_ref, _ref2) {
    var target = _ref[0],
        isActive = _ref[1];
    var previousTarget = _ref2[0];

    if (!target || !enable.value) {
      previousTarget && bodyScrollLock.enableBodyScroll(previousTarget);
    } else if (target && isActive) {
      bodyScrollLock.disableBodyScroll(target, options);
    } else {
      bodyScrollLock.enableBodyScroll(target);
    }
  }, {
    immediate: true,
    flush: "post"
  });
  return {
    scrollLockRef: scrollLockRef
  };
}

exports.BodyScrollLockDirective = BodyScrollLockDirective;
exports.CScrollLock = CScrollLock;
exports.useBodyScrollLock = useBodyScrollLock;
